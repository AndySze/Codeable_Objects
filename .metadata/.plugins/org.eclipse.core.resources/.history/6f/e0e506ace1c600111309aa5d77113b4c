package com.primitive2d;

import java.util.Collections;
import java.util.Vector;

import processing.core.PApplet;

import com.datatype.DCFace;
import com.datatype.DCHalfEdge;
import com.datatype.Point;
import com.math.Geom;

public class Polygon extends LineCollection{

	public Polygon(){
		super();
		
	}
	
	//polygon add point method that automatically links up points into lines
	@Override
	public void addPoint(double x,double y){
		Point point = new Point(x,y);
		
		int numLines = this.getAllLines().size();
		int numPoints = this.getAllPoints().size();
		if(numLines>0){
			Point start = this.getLineAt(numLines-1).end;
			Line line = new Line(start.copy(),point.copy());
			this.addLine(line);
		}
		else if(numPoints>0){
			Line line = new Line(getPointAt(0).copy(),point.copy());
			this.addLine(line);
		}
		
		this.addPoint(point);
	}
	
	
	public void closePoly(){
		int numPoints = this.getAllPoints().size();
		Line line = new Line(getPointAt(numPoints-1).copy(),getPointAt(0).copy());
		this.addLine(line);
	}
	
	
	 public void orderEdges(){
	    	int missedEdges = 0;
	    	Vector<Line> currentLines = this.getAllLines();
	    	Vector<Line> orderedLines = new Vector<Line>(0);
	    	Collections.sort(currentLines);
	    
	    	//copy over new edges;
	    	for(int i=0;i<currentLines.size();i++){
	    		Line repLine = new Line(currentLines.get(i).start.copy(),currentLines.get(i).end.copy());
	    		currentLines.set(i,repLine);
	    		//System.out.println("start ="+edges.get(i).start.getX()+","+edges.get(i).start.getY()+" end="+edges.get(i).end.getX()+","+edges.get(i).end.getY());
	    		
	    	}
	    	Vector <Point> dupVerticies = new Vector<Point>(0);
	    	for(int i=0;i<currentLines.size();i++)
	    	{
	    		dupVerticies.add(currentLines.get(i).start);
	    		dupVerticies.add(currentLines.get(i).end);
	    	}
	    	
	    	//System.out.println("vert num="+verticies.size()+" edge num="+edges.size());
	    	//find case based on verticies
	    	
	    	if(lines.size()==1){ //only 1 edge
	    		//System.out.println("there is only one edge");
	    		//findUnconnectedEdges(dupVerticies, verticies);
	    		
	    	}
	    	else if ((dupVerticies.size()/2)-edges.size()<0){ //incomplete shape missing one edge
	    		//System.out.println("missing one edge");
	    		findUnconnectedEdges(dupVerticies, verticies);
	    	}
	    	else if(verticies.size()-edges.size()==0){ //complete shape
	    		//System.out.println("complete shape");
	    		sortEdges(verticies);
	    	}
	    	
	    	else if(verticies.size()-edges.size()==2){ //two distinct segments
	    		//System.out.println("two distinct segments");
	    	}
	    	
	    }
	    
	
	  //=============================DRAW AND PRINT METHODS==================================//
	
	@Override
	public void draw(PApplet parent, float strokeWeight){
		parent.stroke(0,0,255);	
		super.draw(parent, strokeWeight);
	}
	
	@Override
	public void print(PApplet parent, float strokeWeight, String filename){
		parent.stroke(0,0,255);	
		super.print(parent, strokeWeight,filename);
	}
	
	@Override
	public Polygon copy(){
		Polygon poly = new Polygon();
		
		Vector<Line> lines = this.getAllLines();
		for(int i=0;i<lines.size();i++){
			Line line = lines.get(i).copy();
			poly.addLine(line);
		}
		poly.setOrigin(this.origin.copy());
		return poly;
	}

}
