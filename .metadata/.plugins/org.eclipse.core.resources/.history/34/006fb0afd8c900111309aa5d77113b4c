package com.primitive2d;

import java.util.Vector;

import com.datastruct.DCHalfEdge;
import com.datastruct.DoublyConnectedEdgeList;
import com.datatype.Point;
import com.math.CompPoint;

public class Curve extends Line { //series of symmetrical curved lines grouped together in a single line
	private Vector<HalfCurve> halfCurves = new Vector<HalfCurve>(); //stores all of the individual parabolas
	private int resolution = 100; // resolution of each curve
	
	
	
	public Curve(Point start, Point end){
		super(start,end);
	}
	

}
class HalfCurve extends Line{
	public Point control;
	private int resolution;
	public HalfCurve(Point start, Point end, Point control){
		super(start,end);
		this.control= control;
	}
	
	private void calculateCurve(){
		

		double y1 = end.getY();
		double x1 = end.getX();
		double y2 = control.getY();
		double x2 = control.getX();
		double y3 = start.getY();
		double x3 = start.getX();


		double denom = (y1 - y2) * (y1 - y3) * (y2 - y3);
		double a = (y3 * (x2 - x1) + y2 * (x1 - x3) + y1 * (x3 - x2)) / denom;
		double b = (Math.pow((float) y3, 2.0) * (x1 - x2) + Math.pow((float) y2, 2.0) * (x3 - x1) + Math.pow((float) y1, 2.0) * (x2 - x3)) / denom;
		double c = (y2 * y3 * (y2 - y3) * x1 + y3 * y1 * (y3 - y1) * x2 + y1 * y2 * (y1 - y2) * x3) / denom;


		for (int i = 0; i < curveResolution + 1; i++) {
			double startPointY = (maxHeight / curveResolution) * i;

			double startPointX = a * startPointY * startPointY + b * startPointY + c;

			double endPointX = maxWidth / 2;
			CompPoint start = new CompPoint(startPointX, startPointY);
			CompPoint end = new CompPoint(endPointX, startPointY);

			DCHalfEdge rad = new DCHalfEdge(start, end);
			//rad.translate(width/2, height/2, new CompPoint(maxWidth/2, maxHeight/2));
			radEdges.addHalfEdge(rad);
		}
	}

	
}