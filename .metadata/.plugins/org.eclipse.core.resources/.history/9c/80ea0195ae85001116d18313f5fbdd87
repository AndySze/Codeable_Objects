package com.design;

import java.util.Vector;

import com.datastruct.DCHalfEdge;
import com.datastruct.DoublyConnectedEdgeList;
import com.math.CompPoint;
import com.math.Trig;




public class Notch extends Part{
	
	public DCHalfEdge top;
	public DCHalfEdge bottom;
	public DCHalfEdge left;
	public DCHalfEdge right;
	
	
	public Notch(double width, double height){
		super(width,height);
		
		//edges and points move in a counter clockwise direction
		this.top = new DCHalfEdge(new CompPoint(width,0),new CompPoint(0,0));
		
		this.left = new DCHalfEdge(new CompPoint(0,0),new CompPoint(0,height));
		this.bottom = new DCHalfEdge(new CompPoint(0,height),new CompPoint(width,height));
		this.right = new DCHalfEdge(new CompPoint(width,height),new CompPoint(width,0));

		this.addHalfEdge(top);
		this.addHalfEdge(left);
		this.addHalfEdge(bottom);
		this.addHalfEdge(right);
	}
	
	
	//clips the part and copies its edges into the new part
			public void merge(Part border){
				Vector <DCHalfEdge> modEdges = new Vector<DCHalfEdge>();
				Vector <DCHalfEdge> borderIntersects = new Vector<DCHalfEdge>();
				for(int i = 0; i<edges.size();i++){
					DCHalfEdge borderEdge = Trig.getIntersectedEdge(edges.get(i).start, edges.get(i).end, edges.get(i), border);
					DCHalfEdge newEdge = findMerge(edges.get(i),border);
					newEdge.inner=true;
					if(newEdge!=null){
						modEdges.addElement(newEdge);
						borderIntersects.addElement(borderEdge);
					}
				}
				for(int i = 0; i<modEdges.size();i++){
					
					border.addHalfEdge(modEdges.get(i));
					
				}
				//need to remove null elements
			}
	
}
