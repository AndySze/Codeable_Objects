package com.primitive2d;

import java.util.Vector;

import com.datastruct.DCHalfEdge;
import com.datastruct.DoublyConnectedEdgeList;
import com.datatype.Point;
import com.math.CompPoint;

public class Curve extends LineCollection { //series of symmetrical curved lines grouped together in a single line
	private Vector<HalfCurve> halfCurves = new Vector<HalfCurve>(); //stores all of the individual parabolas
	private int resolution = 100; // resolution of each curve
	
	
	
	public Curve(Point start, Point end, Point control){
		super(start,end);
		HalfCurve hCurve = new HalfCurve(start,end,control);
	}
	

}


class HalfCurve extends LineCollection{
	public Point control;
	private int resolution;
	private Point start;
	private Point end;
	
	public HalfCurve(Point start, Point end, Point control, int resolution){
		super();
		this.start = start;
		this.end = end;
		this.control= control;
		this.resolution=resolution;
	}
	
	private void calculateCurve(){
		

		double y1 = end.getY();
		double x1 = end.getX();
		double y2 = control.getY();
		double x2 = control.getX();
		double y3 = start.getY();
		double x3 = start.getX();
		
		double height = end.getY()-start.getY();
		double width = end.getX()-start.getX();

		double denom = (y1 - y2) * (y1 - y3) * (y2 - y3);
		double a = (y3 * (x2 - x1) + y2 * (x1 - x3) + y1 * (x3 - x2)) / denom;
		double b = (Math.pow((float) y3, 2.0) * (x1 - x2) + Math.pow((float) y2, 2.0) * (x3 - x1) + Math.pow((float) y1, 2.0) * (x2 - x3)) / denom;
		double c = (y2 * y3 * (y2 - y3) * x1 + y3 * y1 * (y3 - y1) * x2 + y1 * y2 * (y1 - y2) * x3) / denom;


		for (int i = 0; i < resolution + 1; i++) {
			double startPointY = (height / resolution) * i;

			double startPointX = a * startPointY * startPointY + b * startPointY + c;
			
			Point curvePoint = new Point(startPointX,startPointY);
			this.addPoint(startPointX,startPointY);
			
		}
	}
	
	public void addPoint(double x,double y){ //copied from Polygon class
		Point point = new Point(x,y);
		
		int numLines = this.getAllLines().size();
		int numPoints = this.getAllPoints().size();
		if(numPoints == 0){
			this.addPoint(point);
		}
		else if(numLines==0){
			Line line = new Line(this.getPointAt(0),point);
			this.addLineWithoutPoints(line);
			this.addPoint(point);
		}
		if(numLines>0){
			Point start = this.getLineAt(numLines-1).end;
			Line line = new Line(start.copy(),point.copy());
			this.addLine(line);
		}
		
		
		
	}

	
}