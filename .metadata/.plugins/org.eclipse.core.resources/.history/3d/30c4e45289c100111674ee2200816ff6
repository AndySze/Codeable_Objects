package com.pattern;

import com.datatype.Point;
import com.primitive2d.Line;

public class Tree extends Pattern{
	private double limit = 2;//minimum length of a branch before the fractal terminates
	private double growthRate= 0.66;//fraction by which the branch is decreased each recursion
	private double theta = 270;//starting angle of the tree
	private double startingHeight = 200;//starting height of the tree

	private Point origin = new Point(0,0);//starting angle of the tree
	public Tree(){
		super();
		
	}
	
	public void setLimit(double limit){
		this.limit = limit;
	}
	
	public void setGrowthRate(double growthRate){
		this.growthRate = growthRate;
	}
	
	public void setTheta(double theta){
		this.theta = theta;
	}
	
	public void setOrigin(double x,double y){
		this.origin = new Point(x,y);
	}
	
	public void setStartingHeight(double height){
		this.startingHeight = height;
	}
	
	private void generate(){
		
		
	}
	
	private void branch(double height, Point origin){
		height*= growthRate;
		
		//exit function
		if(height >limit){
			Line rightLine = new Line(origin.getX(),origin.getY(),height,theta);
			this.addLine(rightLine);
			this.branch(height,rightLine.end);
			
			Line leftLine = new Line(origin.getX(),origin.getY(),height,-theta);
			this.addLine(leftLine);
			this.branch(height,leftLine.end);
			
		}
	}
}
