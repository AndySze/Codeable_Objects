package com.design;
import com.design.Notch;

public class Rib extends Part {

	
	
	public Rib(double width, double height){
		super(width,height);
	}
	public void addNotches(double notchWidth, double notchHeight, double ribNotchOffset,double topCirclePos,double bottomCirclePos){
		Notch notch1 = new Notch(notchWidth,notchHeight);
		Notch notch2 = new Notch(notchWidth,notchHeight);
		
		this.setNotch(notch1);
		
			
	}
	
	
	private void setNotch(Notch notch, double pos,double ribNotchOffset){
		int topEdgeNum=1;
		int bottomEdgeNum=1;
		for(int i=1;i<edges.size()/2-1;i++){
			
			if(edges.get(i).start.getY()<=pos && edges.get(i+1).start.getY()>=pos ){
					topEdgeNum=i;
					System.out.println("found level at"+i);
				}
			
			if(edges.get(i).end.getY()<=pos+notch.height  && edges.get(i+1).end.getY()>=pos+notch.height ){
				bottomEdgeNum=i;
				System.out.println("found level at"+i);
			}
			
			
		}
		notch.translate(this.edges.get(topEdgeNum).start.getX()+ribNotchOffset,this.edges.get(topEdgeNum).start.getY());
		notch.merge(this,topEdgeNum,bottomEdgeNum);
	}
	
/*	public void addNotches(double notchWidth, double notchHeight, double ribNotchOffset,double topCirclePos,double bottomCirclePos){
		Notch notch1 = new Notch(notchWidth,notchHeight);
		Notch notch2 = new Notch(notchWidth,notchHeight);
		int topEdgeNum=1;
		int topEdgeNum=1;
		for(int i=1;i<edges.size()/2-1;i++){
			System.out.println("rib edge y="+edges.get(i).start.getY());
			System.out.println("notch offset ="+topCirclePos);
			
			if(edges.get(i).start.getY()<=topCirclePos && edges.get(i+1).start.getY()>=topCirclePos ){
					edgeNum=i;
					System.out.println("found level at"+i);
				}
			
			
		}
		notch1.translate(this.edges.get(edgeNum).start.getX()+ribNotchOffset,this.edges.get(edgeNum).start.getY());
		notch1.merge(this);
			
	}*/
	
}
